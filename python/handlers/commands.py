from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.main import AsyncSessionLocal
from config.main import GRPC_PORT, GRPC_ADDR
import asyncio
import json
import logging
from typing import Any, Union

from database.models import User
from keyboards.main import filters_keyboard, settings_keyboard, msg_keyboard

logger = logging.getLogger(__name__)
router = Router()


async def send_grpc_update(tg_id: int, filter_name: str, data: Union[str, Any]) -> dict:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ gRPC
    
    Args:
        tg_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filter_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ JSON –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    from clients.grpc_client import FilterSyncClient as _Client
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not isinstance(data, str):
        payload = json.dumps(data)
    else:
        payload = data
    
    logger.info(f"Sending gRPC update: user_id={tg_id}, filter={filter_name}")
    
    def _call() -> dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        client = None
        try:
            target = f"{GRPC_ADDR}:{GRPC_PORT}"
            logger.debug(f"Connecting to gRPC server at {target}")
            
            client = _Client(target=target)
            
            # –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            result = client.update_user_filters(
                tg_id=tg_id, 
                filter=filter_name,
                data=payload
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                logger.info(f"gRPC update successful: user_id={tg_id}, filter={filter_name}, msg={result.get('message')}")
            else:
                logger.warning(f"gRPC update failed: user_id={tg_id}, filter={filter_name}, error={result.get('message')}")
            
            return result
            
        except Exception as e:
            logger.error(f"gRPC client initialization error: user_id={tg_id}, filter={filter_name}, error={str(e)}")
            return {
                'success': False,
                'message': f'gRPC client initialization error: {str(e)}'
            }
        finally:
            if client:
                try:
                    client.close()
                except Exception as e:
                    logger.debug(f"gRPC client close error: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    return await asyncio.to_thread(_call)


# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TUTORIAL_STEPS = [
    (
        "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAD Scanner!*\n\n"
        "MAD Scanner ‚Äî —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n"
        "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É 17-–∏ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂ "
        "–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üöÄ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!"
    ),
    (
        "‚öôÔ∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
        "‚Ä¢ *–°–ø—Ä–µ–¥* (%) ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏\n"
        "‚Ä¢ *–ü—Ä–æ—Ñ–∏—Ç* ($) ‚Äî —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π\n"
        "‚Ä¢ *–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å* ‚Äî 24-—á–∞—Å–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç –ø–∞—Ä—ã\n"
        "‚Ä¢ *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å* ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\n"
        "‚Ä¢ *–ß–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏* ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤\n\n"
        "_–ò –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞_\n\n"
        "üìç –ö–æ–º–∞–Ω–¥–∞ /filters –∏–ª–∏ —á–µ—Ä–µ–∑\n"
        "/settings ‚Üí *–§–∏–ª—å—Ç—Ä—ã*"
    ),
    (
        "üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ç–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö:\n"
        "‚Ä¢ –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö "
        "–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑\n"
        "/settings ‚Üí *–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*"
    ),
    (
        "üé® *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –ø–∞—Ä –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n"
        "–°–¥–µ–ª–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è –≤–∞—à–µ–≥–æ "
        "—Å—Ç–∏–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n"
        "üìç –ö–æ–º–∞–Ω–¥–∞ /msg –∏–ª–∏ —á–µ—Ä–µ–∑\n"
        "/settings ‚Üí *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—ã*"
    ),
    (
        "‚ú® *–í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!*\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ /settings ‚Äî –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ /filters ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ /msg ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–£—Å–ø–µ—à–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞! üìà"
    ),
]

@router.message(Command("tutorial"))
async def tutorial_cmd(message: types.Message, state: FSMContext, command: CommandObject = None):
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    await state.update_data(tutorial_step=0)
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞–ª–µ–µ", callback_data="tutorial_next")
    await message.answer(TUTORIAL_STEPS[0], reply_markup=builder.as_markup(), parse_mode="Markdown")


@router.callback_query(lambda c: c.data == "tutorial_next")
async def tutorial_next_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step = data.get("tutorial_step", 0) + 1
    if step < len(TUTORIAL_STEPS) - 1:
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–∞–ª–µ–µ", callback_data="tutorial_next")
        await callback.message.edit_text(TUTORIAL_STEPS[step], reply_markup=builder.as_markup(), parse_mode="Markdown")
        await state.update_data(tutorial_step=step)
    elif step == len(TUTORIAL_STEPS) - 1:
        builder = InlineKeyboardBuilder()
        builder.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="tutorial_finish")
        await callback.message.edit_text(TUTORIAL_STEPS[step], reply_markup=builder.as_markup(), parse_mode="Markdown")
        await state.update_data(tutorial_step=step)
    else:
        await callback.answer("–¢—É—Ç–æ—Ä–∏–∞–ª —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)


@router.callback_query(lambda c: c.data == "tutorial_finish")
async def tutorial_finish_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await settings_cmd(callback.message)


@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    async with AsyncSessionLocal() as session:
        async with session.begin():
            user = await session.get(User, message.from_user.id)
            if not user:
                user = User(
                    tg_id=message.from_user.id,
                    active=True,
                )
                session.add(user)

                await session.commit()

                # –ó–∞–ø—É—Å–∫ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await state.update_data(tutorial_step=0)

                builder = InlineKeyboardBuilder()
                builder.button(text="–î–∞–ª–µ–µ", callback_data="tutorial_next")
                await message.answer(TUTORIAL_STEPS[0], reply_markup=builder.as_markup(), parse_mode="Markdown")
            else:
                await message.answer(
                    "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞."
                )
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è user –≤ Golang-—Å–µ—Ä–∏—Å–µ —Å –ø–æ–º–æ—â—å—é gRPC
    await send_grpc_update(message.from_user.id, 'NewUser', '')


@router.message(Command("settings"))
async def settings_cmd(message: types.Message):
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n\n"
        "‚Ä¢ *–§–∏–ª—å—Ç—Ä—ã* ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –ø–∞—Ä\n"
        "‚Ä¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—ã* ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã\n"
        "‚Ä¢ *–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π* ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
    )

    await message.answer(text, reply_markup=settings_keyboard(), parse_mode="Markdown")


@router.message(Command("filters"))
async def filters_cmd(message: types.Message):
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        def format_filter(min_val, max_val, suffix=""):
            if min_val > 0 and max_val > 0:
                if min_val == max_val:
                    return f"={min_val:.2f}{suffix}"
                else:
                    return f"{min_val:.2f} - {max_val:.2f}{suffix}"
            elif min_val > 0:
                return f"> {min_val:.2f}{suffix}"
            elif max_val > 0:
                return f"< {max_val:.2f}{suffix}"
            else:
                return "–æ—Ç–∫–ª—é—á—ë–Ω"

        lines = [
            "‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n",
            "‚ùó –§–∏–ª—å—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é\n",
            f"üîÄ –°–ø—Ä–µ–¥: *{format_filter(user.spread_min, user.spread_max, ' %')}*",
            f"üí∞ –ü—Ä–æ—Ñ–∏—Ç: *{format_filter(user.profit_min, user.profit_max, ' $')}*",
            f"üìä –û–±—ä–µ–º: *{format_filter(user.volume_min, user.volume_max, ' $')}*",
            f"üí∏ –ú–∞–∫—Å. –∫–æ–º–∏—Å—Å–∏—è: *{user.total_fee_max:.2f}$*" if user.total_fee_max > 0 else "üí∏ –ú–∞–∫—Å. –∫–æ–º–∏—Å—Å–∏—è: *–æ—Ç–∫–ª—é—á–µ–Ω–∞*",
            f"üìà –ú–∏–Ω. 24—á. –æ–±–æ—Ä–æ—Ç: *{user.daily_turnover_min:.2f}$*" if user.daily_turnover_min > 0 else "üìà –ú–∏–Ω. 24—á. –æ–±–æ—Ä–æ—Ç: *–æ—Ç–∫–ª—é—á—ë–Ω*",
            f"üìÉ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: *{'–î–∞' if user.check_contract else '–ù–µ—Ç'}*"
        ]

        text = "\n".join(lines)
        await message.answer(text, reply_markup=filters_keyboard(), parse_mode="Markdown")


@router.message(Command("msg"))
async def msg_cmd(message: types.Message):
    text = (
        "üé® *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ "
        "–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –ø–∞—Ä. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã –∏–º–µ–Ω–Ω–æ –≤–∞–º"
    )

    await message.answer(text, reply_markup=msg_keyboard(), parse_mode="Markdown")
