from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from models.consts import *
from database.models import User

def settings_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîé –§–∏–ª—å—Ç—Ä—ã", callback_data="filters_back")],
        [InlineKeyboardButton(text="üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—ã", callback_data="menu_msg"),],
        [InlineKeyboardButton(text="üîÑ –ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="menu_notifys"),],
    ])

def notifys_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîî –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", callback_data="freq_instant")],
        [InlineKeyboardButton(text="‚è∞ –†–∞–∑ –≤ 15 –º–∏–Ω—É—Ç", callback_data="freq_15min"), InlineKeyboardButton(text="üïê –†–∞–∑ –≤ —á–∞—Å", callback_data="freq_1hour")],
        [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—ã", callback_data="freq_never")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="freq_custom")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_settings")],
    ])

def msg_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="show_msg")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="edit_params")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_settings")],
    ])

def show_msg_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="msg_back")],
    ])

def filters_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè¶ –ë–∏—Ä–∂–∏", callback_data="edit_exchanges")],
        [InlineKeyboardButton(text="üîÄ –°–ø—Ä–µ–¥", callback_data="edit_spread"), InlineKeyboardButton(text="üí∞ –ü—Ä–æ—Ñ–∏—Ç", callback_data="edit_profit")],
        [InlineKeyboardButton(text="üìä –û–±—ä–µ–º", callback_data="edit_volume"), InlineKeyboardButton(text="üí∏ –ö–æ–º–∏—Å—Å–∏—è", callback_data="edit_fee")],
        [InlineKeyboardButton(text="üìà 24—á. –æ–±–æ—Ä–æ—Ç", callback_data="edit_daily_turnover"), InlineKeyboardButton(text="üìÉ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã", callback_data="edit_contract")],
        [InlineKeyboardButton(text="üö´ –ß–°", callback_data="edit_blacklists")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_settings")],
    ])

def blacklist_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™ô –ß–° –ú–æ–Ω–µ—Ç", callback_data="edit_blacklist_coins")],
        [InlineKeyboardButton(text="üîó –ß–° –°–µ—Ç–µ–π", callback_data="edit_blacklist_nets")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é", callback_data="filters_back")]
    ])

def coins_blacklist_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="add_coin")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="remove_coin")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_blacklists")]
    ])

def nets_blacklist_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç–∏", callback_data="add_net")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç–∏", callback_data="remove_net")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_blacklists")]
    ])

def cancel_keyboard(type):
    match type:
        case "edit": 
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
            ])
        case "freq":
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_freq")]
            ])

def get_category_data(category_key: str) -> Tuple[str, List[Tuple[int, str]]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á—É"""
    categories = {
        "max_volume_params": ("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º", [
            (SPREAD_MAX_BIT, "–°–ø—Ä–µ–¥"),
            (PROFIT_MAX_BIT, "–ü—Ä–æ—Ñ–∏—Ç"),
            (COMMISSION_MAX_BIT, "–ö–æ–º–∏—Å—Å–∏—è"),
        ]),
        "min_volume_params": ("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º", [
            (SPREAD_MIN_BIT, "–°–ø—Ä–µ–¥"),
            (PROFIT_MIN_BIT, "–ü—Ä–æ—Ñ–∏—Ç"),
            (COMMISSION_MIN_BIT, "–ö–æ–º–∏—Å—Å–∏—è"),
        ]),
        "additional_params": ("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", [
            (CHECK_CONTRACT_BIT, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"),
            (DAILY_TURNOVER_BIT, "24—á –æ–±–æ—Ä–æ—Ç"),
            (WITHDRAW_TIME_BIT, "–í—Ä–µ–º—è –≤—ã–≤–æ–¥–∞"),
            (LIFETIME_BIT, "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏"),
        ])
    }
    return categories.get(category_key, ("", []))

def get_category_params(category_key: str) -> List[Tuple[int, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_data = get_category_data(category_key)
    return category_data[1] if category_data else []

def main_params_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    buttons = [
        [InlineKeyboardButton(
            text=f"üìà –ú–∞–∫—Å –æ–±—ä—ë–º",
            callback_data="max_volume_params_0"
        )],
        [InlineKeyboardButton(
            text=f"üìâ –ú–∏–Ω –æ–±—ä—ë–º", 
            callback_data="min_volume_params_0"
        )],
        [InlineKeyboardButton(
            text=f"üåü –ù–∞–∏–ª—É—á—à–∏–π –æ–±—ä—ë–º", 
            callback_data="best_volume_params_0"
        )],
        [InlineKeyboardButton(
            text=f"üîß –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
            callback_data="additional_params_0"
        )],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="show_msg"),InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="msg_back")],
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def category_params_keyboard(user: User, params_list: List[Tuple[int, str]], page: int = 0, category_key: str = "", all_enabled: bool = False) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ITEMS_PER_PAGE = 6  # 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_pages = (len(params_list) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    current_params = params_list[start_idx:end_idx]
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    toggle_text = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é" if all_enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _params –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    full_category_key = category_key if category_key.endswith("_params") else f"{category_key}_params"
    buttons.append([InlineKeyboardButton(
        text=toggle_text,
        callback_data=f"toggle_category_{full_category_key}"
    )])
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    param_buttons = []
    for i, (bit, name) in enumerate(current_params):
        is_enabled = user.is_param_enabled(bit)
        status = "‚úÖ" if is_enabled else "‚ùå"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _params –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        full_category_key = category_key if category_key.endswith("_params") else f"{category_key}_params"
        param_button = InlineKeyboardButton(
            text=f"{status} {name}",
            callback_data=f"toggle_category_param_{bit}_{page}_{full_category_key}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if i % 2 == 0:
            param_buttons.append([param_button])
        else:
            param_buttons[-1].append(param_button)
    
    buttons.extend(param_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if total_pages > 1:
        pagination_buttons = []
        
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"{category_key}_{page-1}"
            ))
        
        pagination_buttons.append(InlineKeyboardButton(
            text=f"{page+1}/{total_pages}",
            callback_data="ignore"
        ))
        
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"{category_key}_{page+1}"
            ))
        
        buttons.append(pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([])
    
    buttons.append([
        InlineKeyboardButton(
            text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
            callback_data="show_msg"
        ),
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="edit_params"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_exchanges_keyboard(user: User, page: int = 0) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∏—Ä–∂–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    start_idx = page * EXCHANGES_ITEMS_PER_PAGE
    end_idx = start_idx + EXCHANGES_ITEMS_PER_PAGE
    current_exchanges = EXCHANGES_LIST[start_idx:end_idx]
    
    buttons = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã–≤–æ–¥/–î–µ–ø–æ–∑–∏—Ç
    buttons.append([
        InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="___"),
        InlineKeyboardButton(text="–í—ã–≤–æ–¥", callback_data="___"),
        InlineKeyboardButton(text="–î–µ–ø–æ–∑–∏—Ç", callback_data="___")
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –±–∏—Ä–∂
    for bit, name in current_exchanges:
        withdraw_status = "‚úÖ" if user.is_withdraw_exchange_enabled(bit) else "‚ùå"
        deposit_status = "‚úÖ" if user.is_deposit_exchange_enabled(bit) else "‚ùå"
        
        buttons.append([
            InlineKeyboardButton(text=name, callback_data=f"exchange_info_{bit}"),
            InlineKeyboardButton(text=withdraw_status, callback_data=f"toggle_withdraw_{bit}_{page}"),
            InlineKeyboardButton(text=deposit_status, callback_data=f"toggle_deposit_{bit}_{page}")
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    total_pages = (len(EXCHANGES_LIST) + EXCHANGES_ITEMS_PER_PAGE - 1) // EXCHANGES_ITEMS_PER_PAGE
    
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"exchanges_page_{page-1}"
        ))
    
    pagination_buttons.append(InlineKeyboardButton(
        text=f"{page+1}/{total_pages}",
        callback_data="current_page"
    ))
    
    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"exchanges_page_{page+1}"
        ))
    
    if pagination_buttons:
        buttons.append(pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é",
        callback_data="filters_back"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def edit_contract_keyboard(user: User) -> InlineKeyboardMarkup:
    status = "‚úÖ" if user.check_contract else "‚ùå"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{status} –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", callback_data="toggle_contract")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é", callback_data="filters_back")]
    ])
