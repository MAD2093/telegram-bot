package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"tg_bot/config"
	"tg_bot/models"
	"tg_bot/services"

	"github.com/MAD2093/shared-go/pkg/models/spotarbitrage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api          *tgbotapi.BotAPI
	config       *config.Config
	redisService *services.RedisService
	dbService    *services.DBService
	users        *models.UserStore
	wg           sync.WaitGroup
	ctx          context.Context
	cancel       context.CancelFunc
}

func NewBot(cfg *config.Config) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		return nil, err
	}

	// –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –Ω–µ —Å–ª—É—à–∞–µ–º –∞–ø–¥–µ–π—Ç—ã
	if _, err := api.Request(tgbotapi.DeleteWebhookConfig{DropPendingUpdates: true}); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: %v", err)
	}

	ctx := context.Background()

	dbService, err := services.NewDBService(ctx, cfg.DatabaseURL)
	if err != nil {
		return nil, err
	}
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ-–º–∏–≥—Ä–∞—Ü–∏–∏
	if err := dbService.AutoMigrate(ctx); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ-–º–∏–≥—Ä–∞—Ü–∏–∏: %w", err)
	}

	redisService, err := services.NewRedisService(cfg.RedisAddr, cfg.RedisPassword)
	if err != nil {
		return nil, err
	}

	users, err := dbService.LoadUsers(ctx)
	if err != nil {
		return nil, err
	}
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", users.Len())

	bot := &Bot{
		api:          api,
		config:       cfg,
		redisService: redisService,
		dbService:    dbService,
		users:        users,
		ctx:          ctx,
	}

	return bot, nil
}

func (b *Bot) Start() {
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", b.api.Self.UserName)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä –∏–∑ Redis
	b.wg.Add(1)
	go b.handleArbitragePairs()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	b.wg.Wait()
}

func (b *Bot) handleArbitragePairs() {
	defer b.wg.Done()

	pairChan := make(chan models.ArbPair)
	go b.redisService.SubscribeToArbitrage(b.ctx, pairChan)

	for {
		select {
		case <-b.ctx.Done():
			return
		case pair := <-pairChan:
			b.processPair(pair)
		}
	}
}

func (b *Bot) processPair(pair models.ArbPair) {
	b.users.Range(func(userID int64, user *models.User) bool {
		if user.CheckFilter(&pair) {
			b.sendPair(user, pair)
		}
		return true
	})
}

// calculatePrice —Å—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞.
func CalculatePrice(book *[]spotarbitrage.Order, coins float64) float64 {
	var sum float64
	var orderBookVol float64
	remainingVol := coins

	for _, order := range *book {
		orderBookVol += order.Amount

		if remainingVol <= order.Amount {
			sum += remainingVol * order.Price
			break
		}

		remainingVol -= order.Amount
		sum += order.Amount * order.Price
	}

	if orderBookVol < coins {
		return -1
	}

	return sum / coins
}

func (b *Bot) sendPair(user *models.User, pair models.ArbPair) {
	var userVolume float64
	// a   b    VolumeMin  VolumeMax
	// 400 600  500        1000       - return 600
	// 600 900  500        1000       - return 900
	// 900 1100 500        1000       - return 1000
	if pair.Data.Up.AskVolUsdt > user.VolumeMax {
		userVolume = user.VolumeMax
	} else {
		userVolume = pair.Data.Up.AskVolUsdt
	}

	// —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±—ä—ë–º–æ–º –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º
	// –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
	buyPrice := CalculatePrice(&pair.OrderBook.Asks, userVolume)
	sellPrice := CalculatePrice(&pair.OrderBook.Bids, userVolume-pair.WithdrawalFee)
	totalFee := pair.MakerFee*userVolume + pair.WithdrawalFee
	spread := ((sellPrice - buyPrice) / buyPrice) * 100
	profit := sellPrice*(userVolume-pair.WithdrawalFee) - buyPrice*userVolume

	var sb strings.Builder

	// –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–∞ –¥–ª—è —à—Ç–æ—Ä–∫–∏)
	sb.WriteString(pair.Symbol)
	sb.WriteString(" | ")
	sb.WriteString(pair.WithdrawalExchange)
	sb.WriteString(" ‚Üí ")
	sb.WriteString(pair.DepositExchange)
	sb.WriteString(" | ")
	sb.WriteString(strconv.FormatFloat(spread, 'f', 2, 64))
	sb.WriteString("% ")
	sb.WriteString(strconv.FormatFloat(profit, 'f', 2, 64))
	sb.WriteString("$\n\n")

	sb.WriteString("ü™ô –ú–æ–Ω–µ—Ç–∞: *")
	sb.WriteString(pair.Symbol)
	sb.WriteString("*\n")
	sb.WriteString("üîó –ë–∏—Ä–∂–∏: ")
	sb.WriteString(b.generateExchangeLinks(&pair))
	sb.WriteString("\n\n")

	// –ë–ª–æ–∫ 1 ‚Äì –ø–µ—Ä–≤–∞—è –±–∏—Ä–∂–∞ (Ask)
	sb.WriteString(pair.WithdrawalExchange)
	sb.WriteString(": ")
	sb.WriteString("\n    üí∞ Price: $*")
	sb.WriteString(strconv.FormatFloat(buyPrice, 'f', 2, 64))
	sb.WriteString("*\n    üìä Volume: *")
	sb.WriteString(strconv.FormatFloat(userVolume, 'f', 2, 64))
	sb.WriteString("* USDT ‚Üí *")
	sb.WriteString(strconv.FormatFloat(userVolume/buyPrice, 'f', 2, 64)) // –ø–µ—Ä–µ—Å—á–µ—Ç –≤ coin
	sb.WriteString("* ")
	sb.WriteString(pair.Symbol)
	sb.WriteString("\n    üè¶ Withdrawal: *")
	sb.WriteString(pair.WithdrawalNetwork)
	sb.WriteString("*\n\n")

	// –ë–ª–æ–∫ 2 ‚Äì –≤—Ç–æ—Ä–∞—è –±–∏—Ä–∂–∞ (Bid)
	sb.WriteString(pair.DepositExchange)
	sb.WriteString(": ")
	sb.WriteString("\n    üí∞ Price: $*")
	sb.WriteString(strconv.FormatFloat(sellPrice, 'f', 2, 64))
	sb.WriteString("*\n    üìä Volume: *")
	sb.WriteString(strconv.FormatFloat((userVolume-pair.WithdrawalFee)/sellPrice, 'f', 2, 64)) // –ø–µ—Ä–µ—Å—á–µ—Ç –≤ coin
	sb.WriteString("* ")
	sb.WriteString(pair.Symbol)
	sb.WriteString(" ‚Üí *")
	sb.WriteString(strconv.FormatFloat(userVolume-pair.WithdrawalFee, 'f', 2, 64))
	sb.WriteString("* USDT")
	sb.WriteString("\n    üè¶ Deposit: *")
	sb.WriteString(pair.WithdrawalNetwork)
	sb.WriteString("*\n\n")

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–∞
	sb.WriteString("üìà –°–ø—Ä–µ–¥: *")
	sb.WriteString(strconv.FormatFloat(spread, 'f', 2, 64))
	sb.WriteString("%*\n")
	sb.WriteString("üíµ –ü—Ä–æ—Ñ–∏—Ç: *")
	sb.WriteString(strconv.FormatFloat(profit, 'f', 2, 64))
	sb.WriteString("$*\n")
	sb.WriteString("‚úÇÔ∏è –ö–æ–º–∏—Å—Å–∏—è: *")
	sb.WriteString(strconv.FormatFloat(totalFee, 'f', 2, 64))
	sb.WriteString("$*\n")
	sb.WriteString("‚è≥ –í—Ä–µ–º—è –≤—ã–≤–æ–¥–∞: ~*")
	sb.WriteString(pair.WithdrawalTime)
	sb.WriteString("*\nüí∞ –ú–∞–∫—Å. –æ–±—ä–µ–º: *")
	sb.WriteString(strconv.FormatFloat(pair.Data.Up.AskVolUsdt, 'f', 2, 64))
	sb.WriteString("$*\n\n")
	sb.WriteString("‚è≥ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: *")
	sb.WriteString(pair.TimeLife)
	sb.WriteString("*")

	msg := tgbotapi.NewMessage(user.TgID, sb.String())
	msg.ParseMode = "Markdown"
	msg.DisableWebPagePreview = true

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä—ã: %v", err)
	}
}

// generateExchangeLinks –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏—Ä–∂–∏ –¥–ª—è –ø–∞—Ä—ã
func (b *Bot) generateExchangeLinks(pair *models.ArbPair) string {
	var links []string
	base := pair.Symbol
	quote := "USDT"

	// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–∏—Ä–∂ –∏–∑ –ø–∞—Ä—ã
	withdrawExchange := strings.ToUpper(pair.WithdrawalExchange)
	depositExchange := strings.ToUpper(pair.DepositExchange)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏—Ä–∂—É –≤—ã–≤–æ–¥–∞
	if urlTemplate, ok := b.config.ExchangeURLs[withdrawExchange]; ok {
		url := fmt.Sprintf(urlTemplate, base, quote)
		links = append(links, fmt.Sprintf("[%s](%s)", withdrawExchange, url))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏—Ä–∂—É –¥–µ–ø–æ–∑–∏—Ç–∞
	if urlTemplate, ok := b.config.ExchangeURLs[depositExchange]; ok {
		url := fmt.Sprintf(urlTemplate, base, quote)
		links = append(links, fmt.Sprintf("[%s](%s)", depositExchange, url))
	}

	return strings.Join(links, " ‚Üí ")
}
